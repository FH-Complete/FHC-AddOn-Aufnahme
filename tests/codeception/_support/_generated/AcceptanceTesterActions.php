<?php
/**
 * ./tests/codeception/_support/_generated/AcceptanceTesterActions.php
 *
 * @package default
 */


//[STAMP] 6902e59367f1078fe016b8c671c097a2
namespace _generated;

// This class was automatically generated by build task
// You should not change it manually as it will be overwritten on next build
// @codingStandardsIgnoreFile

use Codeception\Module\WebDriver;
use Codeception\Module\Db;

trait AcceptanceTesterActions
{

	/**
	 *
	 * @return \Codeception\Scenario
	 */
	abstract protected function getScenario();


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Print out latest Selenium Logs in debug mode
	 *
	 * @see \Codeception\Module\WebDriver::debugWebDriverLogs()
	 * @return unknown
	 */
	public function debugWebDriverLogs() {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('debugWebDriverLogs', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Changes the subdomain for the 'url' configuration parameter.
	 * Does not open a page; use `amOnPage` for that.
	 *
	 * ``` php
	 * <?php
	 * // If config is: 'http://mysite.com'
	 * // or config is: 'http://www.mysite.com'
	 * // or config is: 'http://company.mysite.com'
	 *
	 * $I->amOnSubdomain('user');
	 * $I->amOnPage('/');
	 * // moves to http://user.mysite.com/
	 * ?>
	 * ```
	 *
	 *
	 * @see \Codeception\Module\WebDriver::amOnSubdomain()
	 * @param unknown $subdomain
	 * @return mixed
	 */
	public function amOnSubdomain($subdomain) {
		return $this->getScenario()->runStep(new \Codeception\Step\Condition('amOnSubdomain', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Takes a screenshot of the current window and saves it to `tests/_output/debug`.
	 *
	 * ``` php
	 * <?php
	 * $I->amOnPage('/user/edit');
	 * $I->makeScreenshot('edit_page');
	 * // saved to: tests/_output/debug/edit_page.png
	 * ?>
	 * ```
	 *
	 * @see \Codeception\Module\WebDriver::makeScreenshot()
	 * @param unknown $name
	 * @return unknown
	 */
	public function makeScreenshot($name) {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('makeScreenshot', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Resize the current window.
	 *
	 * ``` php
	 * <?php
	 * $I->resizeWindow(800, 600);
	 *
	 * ```
	 *
	 * @see \Codeception\Module\WebDriver::resizeWindow()
	 * @param int     $width
	 * @param int     $height
	 * @return unknown
	 */
	public function resizeWindow($width, $height) {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('resizeWindow', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that a cookie with the given name is set.
	 * You can set additional cookie params like `domain`, `path` as array passed in last argument.
	 *
	 * ``` php
	 * <?php
	 * $I->seeCookie('PHPSESSID');
	 * ?>
	 * ```
	 *
	 * Conditional Assertion: Test won't be stopped on fail
	 *
	 * @see \Codeception\Module\WebDriver::seeCookie()
	 * @param unknown $cookie
	 * @param array   $params (optional)
	 * @return mixed
	 */
	public function canSeeCookie($cookie, $params = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeCookie', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that a cookie with the given name is set.
	 * You can set additional cookie params like `domain`, `path` as array passed in last argument.
	 *
	 * ``` php
	 * <?php
	 * $I->seeCookie('PHPSESSID');
	 * ?>
	 * ```
	 *
	 * @see \Codeception\Module\WebDriver::seeCookie()
	 * @param unknown $cookie
	 * @param array   $params (optional)
	 * @return mixed
	 */
	public function seeCookie($cookie, $params = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeCookie', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that there isn't a cookie with the given name.
	 * You can set additional cookie params like `domain`, `path` as array passed in last argument.
	 *
	 *
	 * Conditional Assertion: Test won't be stopped on fail
	 *
	 * @see \Codeception\Module\WebDriver::dontSeeCookie()
	 * @param unknown $cookie
	 * @param array   $params (optional)
	 * @return mixed
	 */
	public function cantSeeCookie($cookie, $params = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeCookie', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that there isn't a cookie with the given name.
	 * You can set additional cookie params like `domain`, `path` as array passed in last argument.
	 *
	 *
	 * @see \Codeception\Module\WebDriver::dontSeeCookie()
	 * @param unknown $cookie
	 * @param array   $params (optional)
	 * @return mixed
	 */
	public function dontSeeCookie($cookie, $params = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\Assertion('dontSeeCookie', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Sets a cookie with the given name and value.
	 * You can set additional cookie params like `domain`, `path`, `expires`, `secure` in array passed as last argument.
	 *
	 * ``` php
	 * <?php
	 * $I->setCookie('PHPSESSID', 'el4ukv0kqbvoirg7nkp4dncpk3');
	 * ?>
	 * ```
	 *
	 *
	 * @see \Codeception\Module\WebDriver::setCookie()
	 * @param unknown $cookie
	 * @param unknown $value
	 * @param array   $params (optional)
	 * @return mixed
	 */
	public function setcookie($cookie, $value, $params = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('setCookie', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Unsets cookie with the given name.
	 * You can set additional cookie params like `domain`, `path` in array passed as last argument.
	 *
	 *
	 * @see \Codeception\Module\WebDriver::resetCookie()
	 * @param unknown $cookie
	 * @param array   $params (optional)
	 * @return mixed
	 */
	public function resetCookie($cookie, $params = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('resetCookie', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Grabs a cookie value.
	 * You can set additional cookie params like `domain`, `path` in array passed as last argument.
	 *
	 *
	 * @see \Codeception\Module\WebDriver::grabCookie()
	 * @param unknown $cookie
	 * @param array   $params (optional)
	 * @return mixed
	 */
	public function grabCookie($cookie, $params = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('grabCookie', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Open web page at the given absolute URL and sets its hostname as the base host.
	 *
	 * ``` php
	 * <?php
	 * $I->amOnUrl('http://codeception.com');
	 * $I->amOnPage('/quickstart'); // moves to http://codeception.com/quickstart
	 * ?>
	 * ```
	 *
	 * @see \Codeception\Module\WebDriver::amOnUrl()
	 * @param unknown $url
	 * @return unknown
	 */
	public function amOnUrl($url) {
		return $this->getScenario()->runStep(new \Codeception\Step\Condition('amOnUrl', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Opens the page for the given relative URI.
	 *
	 * ``` php
	 * <?php
	 * // opens front page
	 * $I->amOnPage('/');
	 * // opens /register page
	 * $I->amOnPage('/register');
	 * ```
	 *
	 * @see \Codeception\Module\WebDriver::amOnPage()
	 * @param unknown $page
	 * @return unknown
	 */
	public function amOnPage($page) {
		return $this->getScenario()->runStep(new \Codeception\Step\Condition('amOnPage', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that the current page contains the given string (case insensitive).
	 *
	 * You can specify a specific HTML element (via CSS or XPath) as the second
	 * parameter to only search within that element.
	 *
	 * ``` php
	 * <?php
	 * $I->see('Logout');                 // I can suppose user is logged in
	 * $I->see('Sign Up', 'h1');          // I can suppose it's a signup page
	 * $I->see('Sign Up', '//body/h1');   // with XPath
	 * ```
	 *
	 * Note that the search is done after stripping all HTML tags from the body,
	 * so `$I->see('strong')` will return true for strings like:
	 *
	 *   - `<p>I am Stronger than thou</p>`
	 *   - `<script>document.createElement('strong');</script>`
	 *
	 * But will *not* be true for strings like:
	 *
	 *   - `<strong>Home</strong>`
	 *   - `<div class="strong">Home</strong>`
	 *   - `<!-- strong -->`
	 *
	 * For checking the raw source code, use `seeInSource()`.
	 *
	 * Conditional Assertion: Test won't be stopped on fail
	 *
	 * @see \Codeception\Module\WebDriver::see()
	 * @param unknown $text
	 * @param null    $selector (optional)
	 * @return unknown
	 */
	public function canSee($text, $selector = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('see', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that the current page contains the given string (case insensitive).
	 *
	 * You can specify a specific HTML element (via CSS or XPath) as the second
	 * parameter to only search within that element.
	 *
	 * ``` php
	 * <?php
	 * $I->see('Logout');                 // I can suppose user is logged in
	 * $I->see('Sign Up', 'h1');          // I can suppose it's a signup page
	 * $I->see('Sign Up', '//body/h1');   // with XPath
	 * ```
	 *
	 * Note that the search is done after stripping all HTML tags from the body,
	 * so `$I->see('strong')` will return true for strings like:
	 *
	 *   - `<p>I am Stronger than thou</p>`
	 *   - `<script>document.createElement('strong');</script>`
	 *
	 * But will *not* be true for strings like:
	 *
	 *   - `<strong>Home</strong>`
	 *   - `<div class="strong">Home</strong>`
	 *   - `<!-- strong -->`
	 *
	 * For checking the raw source code, use `seeInSource()`.
	 *
	 * @see \Codeception\Module\WebDriver::see()
	 * @param unknown $text
	 * @param null    $selector (optional)
	 * @return unknown
	 */
	public function see($text, $selector = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\Assertion('see', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that the current page doesn't contain the text specified (case insensitive).
	 * Give a locator as the second parameter to match a specific region.
	 *
	 * ```php
	 * <?php
	 * $I->dontSee('Login');                    // I can suppose user is already logged in
	 * $I->dontSee('Sign Up','h1');             // I can suppose it's not a signup page
	 * $I->dontSee('Sign Up','//body/h1');      // with XPath
	 * ```
	 *
	 * Note that the search is done after stripping all HTML tags from the body,
	 * so `$I->dontSee('strong')` will fail on strings like:
	 *
	 *   - `<p>I am Stronger than thou</p>`
	 *   - `<script>document.createElement('strong');</script>`
	 *
	 * But will ignore strings like:
	 *
	 *   - `<strong>Home</strong>`
	 *   - `<div class="strong">Home</strong>`
	 *   - `<!-- strong -->`
	 *
	 * For checking the raw source code, use `seeInSource()`.
	 *
	 * Conditional Assertion: Test won't be stopped on fail
	 *
	 * @see \Codeception\Module\WebDriver::dontSee()
	 * @param unknown $text
	 * @param null    $selector (optional)
	 * @return unknown
	 */
	public function cantSee($text, $selector = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSee', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that the current page doesn't contain the text specified (case insensitive).
	 * Give a locator as the second parameter to match a specific region.
	 *
	 * ```php
	 * <?php
	 * $I->dontSee('Login');                    // I can suppose user is already logged in
	 * $I->dontSee('Sign Up','h1');             // I can suppose it's not a signup page
	 * $I->dontSee('Sign Up','//body/h1');      // with XPath
	 * ```
	 *
	 * Note that the search is done after stripping all HTML tags from the body,
	 * so `$I->dontSee('strong')` will fail on strings like:
	 *
	 *   - `<p>I am Stronger than thou</p>`
	 *   - `<script>document.createElement('strong');</script>`
	 *
	 * But will ignore strings like:
	 *
	 *   - `<strong>Home</strong>`
	 *   - `<div class="strong">Home</strong>`
	 *   - `<!-- strong -->`
	 *
	 * For checking the raw source code, use `seeInSource()`.
	 *
	 * @see \Codeception\Module\WebDriver::dontSee()
	 * @param unknown $text
	 * @param null    $selector (optional)
	 * @return unknown
	 */
	public function dontSee($text, $selector = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\Assertion('dontSee', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that the current page contains the given string in its
	 * raw source code.
	 *
	 * ``` php
	 * <?php
	 * $I->seeInSource('<h1>Green eggs &amp; ham</h1>');
	 * ```
	 *
	 * Conditional Assertion: Test won't be stopped on fail
	 *
	 * @see \Codeception\Module\WebDriver::seeInSource()
	 * @param unknown $raw
	 * @return unknown
	 */
	public function canSeeInSource($raw) {
		return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeInSource', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that the current page contains the given string in its
	 * raw source code.
	 *
	 * ``` php
	 * <?php
	 * $I->seeInSource('<h1>Green eggs &amp; ham</h1>');
	 * ```
	 *
	 * @see \Codeception\Module\WebDriver::seeInSource()
	 * @param unknown $raw
	 * @return unknown
	 */
	public function seeInSource($raw) {
		return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeInSource', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that the current page contains the given string in its
	 * raw source code.
	 *
	 * ```php
	 * <?php
	 * $I->dontSeeInSource('<h1>Green eggs &amp; ham</h1>');
	 * ```
	 *
	 * Conditional Assertion: Test won't be stopped on fail
	 *
	 * @see \Codeception\Module\WebDriver::dontSeeInSource()
	 * @param unknown $raw
	 * @return unknown
	 */
	public function cantSeeInSource($raw) {
		return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeInSource', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that the current page contains the given string in its
	 * raw source code.
	 *
	 * ```php
	 * <?php
	 * $I->dontSeeInSource('<h1>Green eggs &amp; ham</h1>');
	 * ```
	 *
	 * @see \Codeception\Module\WebDriver::dontSeeInSource()
	 * @param unknown $raw
	 * @return unknown
	 */
	public function dontSeeInSource($raw) {
		return $this->getScenario()->runStep(new \Codeception\Step\Assertion('dontSeeInSource', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that the page source contains the given string.
	 *
	 * ```php
	 * <?php
	 * $I->seeInPageSource('<link rel="apple-touch-icon"');
	 * ```
	 *
	 * Conditional Assertion: Test won't be stopped on fail
	 *
	 * @see \Codeception\Module\WebDriver::seeInPageSource()
	 * @param unknown $text
	 * @return unknown
	 */
	public function canSeeInPageSource($text) {
		return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeInPageSource', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that the page source contains the given string.
	 *
	 * ```php
	 * <?php
	 * $I->seeInPageSource('<link rel="apple-touch-icon"');
	 * ```
	 *
	 * @see \Codeception\Module\WebDriver::seeInPageSource()
	 * @param unknown $text
	 * @return unknown
	 */
	public function seeInPageSource($text) {
		return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeInPageSource', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that the page source doesn't contain the given string.
	 *
	 * Conditional Assertion: Test won't be stopped on fail
	 *
	 * @see \Codeception\Module\WebDriver::dontSeeInPageSource()
	 * @param unknown $text
	 * @return unknown
	 */
	public function cantSeeInPageSource($text) {
		return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeInPageSource', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that the page source doesn't contain the given string.
	 *
	 * @see \Codeception\Module\WebDriver::dontSeeInPageSource()
	 * @param unknown $text
	 * @return unknown
	 */
	public function dontSeeInPageSource($text) {
		return $this->getScenario()->runStep(new \Codeception\Step\Assertion('dontSeeInPageSource', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Perform a click on a link or a button, given by a locator.
	 * If a fuzzy locator is given, the page will be searched for a button, link, or image matching the locator string.
	 * For buttons, the "value" attribute, "name" attribute, and inner text are searched.
	 * For links, the link text is searched.
	 * For images, the "alt" attribute and inner text of any parent links are searched.
	 *
	 * The second parameter is a context (CSS or XPath locator) to narrow the search.
	 *
	 * Note that if the locator matches a button of type `submit`, the form will be submitted.
	 *
	 * ``` php
	 * <?php
	 * // simple link
	 * $I->click('Logout');
	 * // button of form
	 * $I->click('Submit');
	 * // CSS button
	 * $I->click('#form input[type=submit]');
	 * // XPath
	 * $I->click('//form/*[@type=submit]');
	 * // link in context
	 * $I->click('Logout', '#nav');
	 * // using strict locator
	 * $I->click(['link' => 'Login']);
	 * ?>
	 * ```
	 *
	 * @see \Codeception\Module\WebDriver::click()
	 * @param unknown $link
	 * @param unknown $context (optional)
	 * @return unknown
	 */
	public function click($link, $context = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('click', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that there's a link with the specified text.
	 * Give a full URL as the second parameter to match links with that exact URL.
	 *
	 * ``` php
	 * <?php
	 * $I->seeLink('Logout'); // matches <a href="#">Logout</a>
	 * $I->seeLink('Logout','/logout'); // matches <a href="/logout">Logout</a>
	 * ?>
	 * ```
	 *
	 * Conditional Assertion: Test won't be stopped on fail
	 *
	 * @see \Codeception\Module\WebDriver::seeLink()
	 * @param unknown $text
	 * @param null    $url  (optional)
	 * @return unknown
	 */
	public function canSeeLink($text, $url = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeLink', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that there's a link with the specified text.
	 * Give a full URL as the second parameter to match links with that exact URL.
	 *
	 * ``` php
	 * <?php
	 * $I->seeLink('Logout'); // matches <a href="#">Logout</a>
	 * $I->seeLink('Logout','/logout'); // matches <a href="/logout">Logout</a>
	 * ?>
	 * ```
	 *
	 * @see \Codeception\Module\WebDriver::seeLink()
	 * @param unknown $text
	 * @param null    $url  (optional)
	 * @return unknown
	 */
	public function seeLink($text, $url = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeLink', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that the page doesn't contain a link with the given string.
	 * If the second parameter is given, only links with a matching "href" attribute will be checked.
	 *
	 * ``` php
	 * <?php
	 * $I->dontSeeLink('Logout'); // I suppose user is not logged in
	 * $I->dontSeeLink('Checkout now', '/store/cart.php');
	 * ?>
	 * ```
	 *
	 * Conditional Assertion: Test won't be stopped on fail
	 *
	 * @see \Codeception\Module\WebDriver::dontSeeLink()
	 * @param unknown $text
	 * @param null    $url  (optional)
	 * @return unknown
	 */
	public function cantSeeLink($text, $url = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeLink', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that the page doesn't contain a link with the given string.
	 * If the second parameter is given, only links with a matching "href" attribute will be checked.
	 *
	 * ``` php
	 * <?php
	 * $I->dontSeeLink('Logout'); // I suppose user is not logged in
	 * $I->dontSeeLink('Checkout now', '/store/cart.php');
	 * ?>
	 * ```
	 *
	 * @see \Codeception\Module\WebDriver::dontSeeLink()
	 * @param unknown $text
	 * @param null    $url  (optional)
	 * @return unknown
	 */
	public function dontSeeLink($text, $url = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\Assertion('dontSeeLink', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that current URI contains the given string.
	 *
	 * ``` php
	 * <?php
	 * // to match: /home/dashboard
	 * $I->seeInCurrentUrl('home');
	 * // to match: /users/1
	 * $I->seeInCurrentUrl('/users/');
	 * ?>
	 * ```
	 *
	 * Conditional Assertion: Test won't be stopped on fail
	 *
	 * @see \Codeception\Module\WebDriver::seeInCurrentUrl()
	 * @param unknown $uri
	 * @return unknown
	 */
	public function canSeeInCurrentUrl($uri) {
		return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeInCurrentUrl', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that current URI contains the given string.
	 *
	 * ``` php
	 * <?php
	 * // to match: /home/dashboard
	 * $I->seeInCurrentUrl('home');
	 * // to match: /users/1
	 * $I->seeInCurrentUrl('/users/');
	 * ?>
	 * ```
	 *
	 * @see \Codeception\Module\WebDriver::seeInCurrentUrl()
	 * @param unknown $uri
	 * @return unknown
	 */
	public function seeInCurrentUrl($uri) {
		return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeInCurrentUrl', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that the current URL is equal to the given string.
	 * Unlike `seeInCurrentUrl`, this only matches the full URL.
	 *
	 * ``` php
	 * <?php
	 * // to match root url
	 * $I->seeCurrentUrlEquals('/');
	 * ?>
	 * ```
	 *
	 * Conditional Assertion: Test won't be stopped on fail
	 *
	 * @see \Codeception\Module\WebDriver::seeCurrentUrlEquals()
	 * @param unknown $uri
	 * @return unknown
	 */
	public function canSeeCurrentUrlEquals($uri) {
		return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeCurrentUrlEquals', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that the current URL is equal to the given string.
	 * Unlike `seeInCurrentUrl`, this only matches the full URL.
	 *
	 * ``` php
	 * <?php
	 * // to match root url
	 * $I->seeCurrentUrlEquals('/');
	 * ?>
	 * ```
	 *
	 * @see \Codeception\Module\WebDriver::seeCurrentUrlEquals()
	 * @param unknown $uri
	 * @return unknown
	 */
	public function seeCurrentUrlEquals($uri) {
		return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeCurrentUrlEquals', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that the current URL matches the given regular expression.
	 *
	 * ``` php
	 * <?php
	 * // to match root url
	 * $I->seeCurrentUrlMatches('~$/users/(\d+)~');
	 * ?>
	 * ```
	 *
	 * Conditional Assertion: Test won't be stopped on fail
	 *
	 * @see \Codeception\Module\WebDriver::seeCurrentUrlMatches()
	 * @param unknown $uri
	 * @return unknown
	 */
	public function canSeeCurrentUrlMatches($uri) {
		return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeCurrentUrlMatches', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that the current URL matches the given regular expression.
	 *
	 * ``` php
	 * <?php
	 * // to match root url
	 * $I->seeCurrentUrlMatches('~$/users/(\d+)~');
	 * ?>
	 * ```
	 *
	 * @see \Codeception\Module\WebDriver::seeCurrentUrlMatches()
	 * @param unknown $uri
	 * @return unknown
	 */
	public function seeCurrentUrlMatches($uri) {
		return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeCurrentUrlMatches', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that the current URI doesn't contain the given string.
	 *
	 * ``` php
	 * <?php
	 * $I->dontSeeInCurrentUrl('/users/');
	 * ?>
	 * ```
	 *
	 * Conditional Assertion: Test won't be stopped on fail
	 *
	 * @see \Codeception\Module\WebDriver::dontSeeInCurrentUrl()
	 * @param unknown $uri
	 * @return unknown
	 */
	public function cantSeeInCurrentUrl($uri) {
		return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeInCurrentUrl', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that the current URI doesn't contain the given string.
	 *
	 * ``` php
	 * <?php
	 * $I->dontSeeInCurrentUrl('/users/');
	 * ?>
	 * ```
	 *
	 * @see \Codeception\Module\WebDriver::dontSeeInCurrentUrl()
	 * @param unknown $uri
	 * @return unknown
	 */
	public function dontSeeInCurrentUrl($uri) {
		return $this->getScenario()->runStep(new \Codeception\Step\Assertion('dontSeeInCurrentUrl', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that the current URL doesn't equal the given string.
	 * Unlike `dontSeeInCurrentUrl`, this only matches the full URL.
	 *
	 * ``` php
	 * <?php
	 * // current url is not root
	 * $I->dontSeeCurrentUrlEquals('/');
	 * ?>
	 * ```
	 *
	 * Conditional Assertion: Test won't be stopped on fail
	 *
	 * @see \Codeception\Module\WebDriver::dontSeeCurrentUrlEquals()
	 * @param unknown $uri
	 * @return unknown
	 */
	public function cantSeeCurrentUrlEquals($uri) {
		return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeCurrentUrlEquals', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that the current URL doesn't equal the given string.
	 * Unlike `dontSeeInCurrentUrl`, this only matches the full URL.
	 *
	 * ``` php
	 * <?php
	 * // current url is not root
	 * $I->dontSeeCurrentUrlEquals('/');
	 * ?>
	 * ```
	 *
	 * @see \Codeception\Module\WebDriver::dontSeeCurrentUrlEquals()
	 * @param unknown $uri
	 * @return unknown
	 */
	public function dontSeeCurrentUrlEquals($uri) {
		return $this->getScenario()->runStep(new \Codeception\Step\Assertion('dontSeeCurrentUrlEquals', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that current url doesn't match the given regular expression.
	 *
	 * ``` php
	 * <?php
	 * // to match root url
	 * $I->dontSeeCurrentUrlMatches('~$/users/(\d+)~');
	 * ?>
	 * ```
	 *
	 * Conditional Assertion: Test won't be stopped on fail
	 *
	 * @see \Codeception\Module\WebDriver::dontSeeCurrentUrlMatches()
	 * @param unknown $uri
	 * @return unknown
	 */
	public function cantSeeCurrentUrlMatches($uri) {
		return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeCurrentUrlMatches', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that current url doesn't match the given regular expression.
	 *
	 * ``` php
	 * <?php
	 * // to match root url
	 * $I->dontSeeCurrentUrlMatches('~$/users/(\d+)~');
	 * ?>
	 * ```
	 *
	 * @see \Codeception\Module\WebDriver::dontSeeCurrentUrlMatches()
	 * @param unknown $uri
	 * @return unknown
	 */
	public function dontSeeCurrentUrlMatches($uri) {
		return $this->getScenario()->runStep(new \Codeception\Step\Assertion('dontSeeCurrentUrlMatches', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Executes the given regular expression against the current URI and returns the first match.
	 * If no parameters are provided, the full URI is returned.
	 *
	 * ``` php
	 * <?php
	 * $user_id = $I->grabFromCurrentUrl('~$/user/(\d+)/~');
	 * $uri = $I->grabFromCurrentUrl();
	 * ?>
	 * ```
	 *
	 *
	 * @see \Codeception\Module\WebDriver::grabFromCurrentUrl()
	 * @param null    $uri (optional)
	 * @return mixed
	 */
	public function grabFromCurrentUrl($uri = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('grabFromCurrentUrl', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that the specified checkbox is checked.
	 *
	 * ``` php
	 * <?php
	 * $I->seeCheckboxIsChecked('#agree'); // I suppose user agreed to terms
	 * $I->seeCheckboxIsChecked('#signup_form input[type=checkbox]'); // I suppose user agreed to terms, If there is only one checkbox in form.
	 * $I->seeCheckboxIsChecked('//form/input[@type=checkbox and @name=agree]');
	 * ?>
	 * ```
	 *
	 * Conditional Assertion: Test won't be stopped on fail
	 *
	 * @see \Codeception\Module\WebDriver::seeCheckboxIsChecked()
	 * @param unknown $checkbox
	 * @return unknown
	 */
	public function canSeeCheckboxIsChecked($checkbox) {
		return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeCheckboxIsChecked', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that the specified checkbox is checked.
	 *
	 * ``` php
	 * <?php
	 * $I->seeCheckboxIsChecked('#agree'); // I suppose user agreed to terms
	 * $I->seeCheckboxIsChecked('#signup_form input[type=checkbox]'); // I suppose user agreed to terms, If there is only one checkbox in form.
	 * $I->seeCheckboxIsChecked('//form/input[@type=checkbox and @name=agree]');
	 * ?>
	 * ```
	 *
	 * @see \Codeception\Module\WebDriver::seeCheckboxIsChecked()
	 * @param unknown $checkbox
	 * @return unknown
	 */
	public function seeCheckboxIsChecked($checkbox) {
		return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeCheckboxIsChecked', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Check that the specified checkbox is unchecked.
	 *
	 * ``` php
	 * <?php
	 * $I->dontSeeCheckboxIsChecked('#agree'); // I suppose user didn't agree to terms
	 * $I->seeCheckboxIsChecked('#signup_form input[type=checkbox]'); // I suppose user didn't check the first checkbox in form.
	 * ?>
	 * ```
	 *
	 * Conditional Assertion: Test won't be stopped on fail
	 *
	 * @see \Codeception\Module\WebDriver::dontSeeCheckboxIsChecked()
	 * @param unknown $checkbox
	 * @return unknown
	 */
	public function cantSeeCheckboxIsChecked($checkbox) {
		return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeCheckboxIsChecked', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Check that the specified checkbox is unchecked.
	 *
	 * ``` php
	 * <?php
	 * $I->dontSeeCheckboxIsChecked('#agree'); // I suppose user didn't agree to terms
	 * $I->seeCheckboxIsChecked('#signup_form input[type=checkbox]'); // I suppose user didn't check the first checkbox in form.
	 * ?>
	 * ```
	 *
	 * @see \Codeception\Module\WebDriver::dontSeeCheckboxIsChecked()
	 * @param unknown $checkbox
	 * @return unknown
	 */
	public function dontSeeCheckboxIsChecked($checkbox) {
		return $this->getScenario()->runStep(new \Codeception\Step\Assertion('dontSeeCheckboxIsChecked', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that the given input field or textarea contains the given value.
	 * For fuzzy locators, fields are matched by label text, the "name" attribute, CSS, and XPath.
	 *
	 * ``` php
	 * <?php
	 * $I->seeInField('Body','Type your comment here');
	 * $I->seeInField('form textarea[name=body]','Type your comment here');
	 * $I->seeInField('form input[type=hidden]','hidden_value');
	 * $I->seeInField('#searchform input','Search');
	 * $I->seeInField('//form/*[@name=search]','Search');
	 * $I->seeInField(['name' => 'search'], 'Search');
	 * ?>
	 * ```
	 *
	 * Conditional Assertion: Test won't be stopped on fail
	 *
	 * @see \Codeception\Module\WebDriver::seeInField()
	 * @param unknown $field
	 * @param unknown $value
	 * @return unknown
	 */
	public function canSeeInField($field, $value) {
		return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeInField', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that the given input field or textarea contains the given value.
	 * For fuzzy locators, fields are matched by label text, the "name" attribute, CSS, and XPath.
	 *
	 * ``` php
	 * <?php
	 * $I->seeInField('Body','Type your comment here');
	 * $I->seeInField('form textarea[name=body]','Type your comment here');
	 * $I->seeInField('form input[type=hidden]','hidden_value');
	 * $I->seeInField('#searchform input','Search');
	 * $I->seeInField('//form/*[@name=search]','Search');
	 * $I->seeInField(['name' => 'search'], 'Search');
	 * ?>
	 * ```
	 *
	 * @see \Codeception\Module\WebDriver::seeInField()
	 * @param unknown $field
	 * @param unknown $value
	 * @return unknown
	 */
	public function seeInField($field, $value) {
		return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeInField', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that an input field or textarea doesn't contain the given value.
	 * For fuzzy locators, the field is matched by label text, CSS and XPath.
	 *
	 * ``` php
	 * <?php
	 * $I->dontSeeInField('Body','Type your comment here');
	 * $I->dontSeeInField('form textarea[name=body]','Type your comment here');
	 * $I->dontSeeInField('form input[type=hidden]','hidden_value');
	 * $I->dontSeeInField('#searchform input','Search');
	 * $I->dontSeeInField('//form/*[@name=search]','Search');
	 * $I->dontSeeInField(['name' => 'search'], 'Search');
	 * ?>
	 * ```
	 *
	 * Conditional Assertion: Test won't be stopped on fail
	 *
	 * @see \Codeception\Module\WebDriver::dontSeeInField()
	 * @param unknown $field
	 * @param unknown $value
	 * @return unknown
	 */
	public function cantSeeInField($field, $value) {
		return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeInField', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that an input field or textarea doesn't contain the given value.
	 * For fuzzy locators, the field is matched by label text, CSS and XPath.
	 *
	 * ``` php
	 * <?php
	 * $I->dontSeeInField('Body','Type your comment here');
	 * $I->dontSeeInField('form textarea[name=body]','Type your comment here');
	 * $I->dontSeeInField('form input[type=hidden]','hidden_value');
	 * $I->dontSeeInField('#searchform input','Search');
	 * $I->dontSeeInField('//form/*[@name=search]','Search');
	 * $I->dontSeeInField(['name' => 'search'], 'Search');
	 * ?>
	 * ```
	 *
	 * @see \Codeception\Module\WebDriver::dontSeeInField()
	 * @param unknown $field
	 * @param unknown $value
	 * @return unknown
	 */
	public function dontSeeInField($field, $value) {
		return $this->getScenario()->runStep(new \Codeception\Step\Assertion('dontSeeInField', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks if the array of form parameters (name => value) are set on the form matched with the
	 * passed selector.
	 *
	 * ``` php
	 * <?php
	 * $I->seeInFormFields('form[name=myform]', [
	 *      'input1' => 'value',
	 *      'input2' => 'other value',
	 * ]);
	 * ?>
	 * ```
	 *
	 * For multi-select elements, or to check values of multiple elements with the same name, an
	 * array may be passed:
	 *
	 * ``` php
	 * <?php
	 * $I->seeInFormFields('.form-class', [
	 *      'multiselect' => [
	 *          'value1',
	 *          'value2',
	 *      ],
	 *      'checkbox[]' => [
	 *          'a checked value',
	 *          'another checked value',
	 *      ],
	 * ]);
	 * ?>
	 * ```
	 *
	 * Additionally, checkbox values can be checked with a boolean.
	 *
	 * ``` php
	 * <?php
	 * $I->seeInFormFields('#form-id', [
	 *      'checkbox1' => true,        // passes if checked
	 *      'checkbox2' => false,       // passes if unchecked
	 * ]);
	 * ?>
	 * ```
	 *
	 * Pair this with submitForm for quick testing magic.
	 *
	 * ``` php
	 * <?php
	 * $form = [
	 *      'field1' => 'value',
	 *      'field2' => 'another value',
	 *      'checkbox1' => true,
	 *      // ...
	 * ];
	 * $I->submitForm('//form[@id=my-form]', $form, 'submitButton');
	 * // $I->amOnPage('/path/to/form-page') may be needed
	 * $I->seeInFormFields('//form[@id=my-form]', $form);
	 * ?>
	 * ```
	 *
	 * Conditional Assertion: Test won't be stopped on fail
	 *
	 * @see \Codeception\Module\WebDriver::seeInFormFields()
	 * @param unknown $formSelector
	 * @param unknown $params
	 * @return unknown
	 */
	public function canSeeInFormFields($formSelector, $params) {
		return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeInFormFields', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks if the array of form parameters (name => value) are set on the form matched with the
	 * passed selector.
	 *
	 * ``` php
	 * <?php
	 * $I->seeInFormFields('form[name=myform]', [
	 *      'input1' => 'value',
	 *      'input2' => 'other value',
	 * ]);
	 * ?>
	 * ```
	 *
	 * For multi-select elements, or to check values of multiple elements with the same name, an
	 * array may be passed:
	 *
	 * ``` php
	 * <?php
	 * $I->seeInFormFields('.form-class', [
	 *      'multiselect' => [
	 *          'value1',
	 *          'value2',
	 *      ],
	 *      'checkbox[]' => [
	 *          'a checked value',
	 *          'another checked value',
	 *      ],
	 * ]);
	 * ?>
	 * ```
	 *
	 * Additionally, checkbox values can be checked with a boolean.
	 *
	 * ``` php
	 * <?php
	 * $I->seeInFormFields('#form-id', [
	 *      'checkbox1' => true,        // passes if checked
	 *      'checkbox2' => false,       // passes if unchecked
	 * ]);
	 * ?>
	 * ```
	 *
	 * Pair this with submitForm for quick testing magic.
	 *
	 * ``` php
	 * <?php
	 * $form = [
	 *      'field1' => 'value',
	 *      'field2' => 'another value',
	 *      'checkbox1' => true,
	 *      // ...
	 * ];
	 * $I->submitForm('//form[@id=my-form]', $form, 'submitButton');
	 * // $I->amOnPage('/path/to/form-page') may be needed
	 * $I->seeInFormFields('//form[@id=my-form]', $form);
	 * ?>
	 * ```
	 *
	 * @see \Codeception\Module\WebDriver::seeInFormFields()
	 * @param unknown $formSelector
	 * @param unknown $params
	 * @return unknown
	 */
	public function seeInFormFields($formSelector, $params) {
		return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeInFormFields', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks if the array of form parameters (name => value) are not set on the form matched with
	 * the passed selector.
	 *
	 * ``` php
	 * <?php
	 * $I->dontSeeInFormFields('form[name=myform]', [
	 *      'input1' => 'non-existent value',
	 *      'input2' => 'other non-existent value',
	 * ]);
	 * ?>
	 * ```
	 *
	 * To check that an element hasn't been assigned any one of many values, an array can be passed
	 * as the value:
	 *
	 * ``` php
	 * <?php
	 * $I->dontSeeInFormFields('.form-class', [
	 *      'fieldName' => [
	 *          'This value shouldn\'t be set',
	 *          'And this value shouldn\'t be set',
	 *      ],
	 * ]);
	 * ?>
	 * ```
	 *
	 * Additionally, checkbox values can be checked with a boolean.
	 *
	 * ``` php
	 * <?php
	 * $I->dontSeeInFormFields('#form-id', [
	 *      'checkbox1' => true,        // fails if checked
	 *      'checkbox2' => false,       // fails if unchecked
	 * ]);
	 * ?>
	 * ```
	 *
	 * Conditional Assertion: Test won't be stopped on fail
	 *
	 * @see \Codeception\Module\WebDriver::dontSeeInFormFields()
	 * @param unknown $formSelector
	 * @param unknown $params
	 * @return unknown
	 */
	public function cantSeeInFormFields($formSelector, $params) {
		return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeInFormFields', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks if the array of form parameters (name => value) are not set on the form matched with
	 * the passed selector.
	 *
	 * ``` php
	 * <?php
	 * $I->dontSeeInFormFields('form[name=myform]', [
	 *      'input1' => 'non-existent value',
	 *      'input2' => 'other non-existent value',
	 * ]);
	 * ?>
	 * ```
	 *
	 * To check that an element hasn't been assigned any one of many values, an array can be passed
	 * as the value:
	 *
	 * ``` php
	 * <?php
	 * $I->dontSeeInFormFields('.form-class', [
	 *      'fieldName' => [
	 *          'This value shouldn\'t be set',
	 *          'And this value shouldn\'t be set',
	 *      ],
	 * ]);
	 * ?>
	 * ```
	 *
	 * Additionally, checkbox values can be checked with a boolean.
	 *
	 * ``` php
	 * <?php
	 * $I->dontSeeInFormFields('#form-id', [
	 *      'checkbox1' => true,        // fails if checked
	 *      'checkbox2' => false,       // fails if unchecked
	 * ]);
	 * ?>
	 * ```
	 *
	 * @see \Codeception\Module\WebDriver::dontSeeInFormFields()
	 * @param unknown $formSelector
	 * @param unknown $params
	 * @return unknown
	 */
	public function dontSeeInFormFields($formSelector, $params) {
		return $this->getScenario()->runStep(new \Codeception\Step\Assertion('dontSeeInFormFields', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Selects an option in a select tag or in radio button group.
	 *
	 * ``` php
	 * <?php
	 * $I->selectOption('form select[name=account]', 'Premium');
	 * $I->selectOption('form input[name=payment]', 'Monthly');
	 * $I->selectOption('//form/select[@name=account]', 'Monthly');
	 * ?>
	 * ```
	 *
	 * Provide an array for the second argument to select multiple options:
	 *
	 * ``` php
	 * <?php
	 * $I->selectOption('Which OS do you use?', array('Windows','Linux'));
	 * ?>
	 * ```
	 *
	 * Or provide an associative array for the second argument to specifically define which selection method should be used:
	 *
	 * ``` php
	 * <?php
	 * $I->selectOption('Which OS do you use?', array('text' => 'Windows')); // Only search by text 'Windows'
	 * $I->selectOption('Which OS do you use?', array('value' => 'windows')); // Only search by value 'windows'
	 * ?>
	 * + ```
	 *
	 * @see \Codeception\Module\WebDriver::selectOption()
	 * @param unknown $select
	 * @param unknown $option
	 * @return unknown
	 */
	public function selectOption($select, $option) {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('selectOption', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 *
	 * @see \Codeception\Module\WebDriver::unselectOption()
	 * @param unknown $select
	 * @param unknown $option
	 * @return unknown
	 */
	public function unselectOption($select, $option) {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('unselectOption', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Ticks a checkbox. For radio buttons, use the `selectOption` method instead.
	 *
	 * ``` php
	 * <?php
	 * $I->checkOption('#agree');
	 * ?>
	 * ```
	 *
	 * @see \Codeception\Module\WebDriver::checkOption()
	 * @param unknown $option
	 * @return unknown
	 */
	public function checkOption($option) {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('checkOption', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Unticks a checkbox.
	 *
	 * ``` php
	 * <?php
	 * $I->uncheckOption('#notify');
	 * ?>
	 * ```
	 *
	 * @see \Codeception\Module\WebDriver::uncheckOption()
	 * @param unknown $option
	 * @return unknown
	 */
	public function uncheckOption($option) {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('uncheckOption', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Fills a text field or textarea with the given string.
	 *
	 * ``` php
	 * <?php
	 * $I->fillField("//input[@type='text']", "Hello World!");
	 * $I->fillField(['name' => 'email'], 'jon@mail.com');
	 * ?>
	 * ```
	 *
	 * @see \Codeception\Module\WebDriver::fillField()
	 * @param unknown $field
	 * @param unknown $value
	 * @return unknown
	 */
	public function fillField($field, $value) {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('fillField', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Attaches a file relative to the Codeception data directory to the given file upload field.
	 *
	 * ``` php
	 * <?php
	 * // file is stored in 'tests/_data/prices.xls'
	 * $I->attachFile('input[@type="file"]', 'prices.xls');
	 * ?>
	 * ```
	 *
	 * @see \Codeception\Module\WebDriver::attachFile()
	 * @param unknown $field
	 * @param unknown $filename
	 * @return unknown
	 */
	public function attachFile($field, $filename) {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('attachFile', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Grabs all visible text from the current page.
	 *
	 * @see \Codeception\Module\WebDriver::getVisibleText()
	 * @return string
	 */
	public function getVisibleText() {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('getVisibleText', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Finds and returns the text contents of the given element.
	 * If a fuzzy locator is used, the element is found using CSS, XPath,
	 * and by matching the full page source by regular expression.
	 *
	 * ``` php
	 * <?php
	 * $heading = $I->grabTextFrom('h1');
	 * $heading = $I->grabTextFrom('descendant-or-self::h1');
	 * $value = $I->grabTextFrom('~<input value=(.*?)]~sgi'); // match with a regex
	 * ?>
	 * ```
	 *
	 *
	 * @see \Codeception\Module\WebDriver::grabTextFrom()
	 * @param unknown $cssOrXPathOrRegex
	 * @return mixed
	 */
	public function grabTextFrom($cssOrXPathOrRegex) {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('grabTextFrom', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Grabs the value of the given attribute value from the given element.
	 * Fails if element is not found.
	 *
	 * ``` php
	 * <?php
	 * $I->grabAttributeFrom('#tooltip', 'title');
	 * ?>
	 * ```
	 *
	 *
	 *
	 * @see \Codeception\Module\WebDriver::grabAttributeFrom()
	 * @param unknown $cssOrXpath
	 * @param unknown $attribute
	 * @return mixed
	 */
	public function grabAttributeFrom($cssOrXpath, $attribute) {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('grabAttributeFrom', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Finds the value for the given form field.
	 * If a fuzzy locator is used, the field is found by field name, CSS, and XPath.
	 *
	 * ``` php
	 * <?php
	 * $name = $I->grabValueFrom('Name');
	 * $name = $I->grabValueFrom('input[name=username]');
	 * $name = $I->grabValueFrom('descendant-or-self::form/descendant::input[@name = 'username']');
	 * $name = $I->grabValueFrom(['name' => 'username']);
	 * ?>
	 * ```
	 *
	 *
	 * @see \Codeception\Module\WebDriver::grabValueFrom()
	 * @param unknown $field
	 * @return mixed
	 */
	public function grabValueFrom($field) {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('grabValueFrom', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Grabs either the text content, or attribute values, of nodes
	 * matched by $cssOrXpath and returns them as an array.
	 *
	 * ```html
	 * <a href="#first">First</a>
	 * <a href="#second">Second</a>
	 * <a href="#third">Third</a>
	 * ```
	 *
	 * ```php
	 * <?php
	 * // would return ['First', 'Second', 'Third']
	 * $aLinkText = $I->grabMultiple('a');
	 *
	 * // would return ['#first', '#second', '#third']
	 * $aLinks = $I->grabMultiple('a', 'href');
	 * ?>
	 * ```
	 *
	 * @see \Codeception\Module\WebDriver::grabMultiple()
	 * @param unknown $cssOrXpath
	 * @param unknown $attribute  (optional)
	 * @return string[]
	 */
	public function grabMultiple($cssOrXpath, $attribute = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('grabMultiple', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that the given element exists on the page and is visible.
	 * You can also specify expected attributes of this element.
	 *
	 * ``` php
	 * <?php
	 * $I->seeElement('.error');
	 * $I->seeElement('//form/input[1]');
	 * $I->seeElement('input', ['name' => 'login']);
	 * $I->seeElement('input', ['value' => '123456']);
	 *
	 * // strict locator in first arg, attributes in second
	 * $I->seeElement(['css' => 'form input'], ['name' => 'login']);
	 * ?>
	 * ```
	 *
	 * Conditional Assertion: Test won't be stopped on fail
	 *
	 * @return
	 * @see \Codeception\Module\WebDriver::seeElement()
	 * @param unknown $selector
	 * @param array   $attributes (optional)
	 */
	public function canSeeElement($selector, $attributes = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeElement', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that the given element exists on the page and is visible.
	 * You can also specify expected attributes of this element.
	 *
	 * ``` php
	 * <?php
	 * $I->seeElement('.error');
	 * $I->seeElement('//form/input[1]');
	 * $I->seeElement('input', ['name' => 'login']);
	 * $I->seeElement('input', ['value' => '123456']);
	 *
	 * // strict locator in first arg, attributes in second
	 * $I->seeElement(['css' => 'form input'], ['name' => 'login']);
	 * ?>
	 * ```
	 *
	 * @return
	 * @see \Codeception\Module\WebDriver::seeElement()
	 * @param unknown $selector
	 * @param array   $attributes (optional)
	 */
	public function seeElement($selector, $attributes = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeElement', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that the given element is invisible or not present on the page.
	 * You can also specify expected attributes of this element.
	 *
	 * ``` php
	 * <?php
	 * $I->dontSeeElement('.error');
	 * $I->dontSeeElement('//form/input[1]');
	 * $I->dontSeeElement('input', ['name' => 'login']);
	 * $I->dontSeeElement('input', ['value' => '123456']);
	 * ?>
	 * ```
	 *
	 * Conditional Assertion: Test won't be stopped on fail
	 *
	 * @see \Codeception\Module\WebDriver::dontSeeElement()
	 * @param unknown $selector
	 * @param array   $attributes (optional)
	 * @return unknown
	 */
	public function cantSeeElement($selector, $attributes = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeElement', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that the given element is invisible or not present on the page.
	 * You can also specify expected attributes of this element.
	 *
	 * ``` php
	 * <?php
	 * $I->dontSeeElement('.error');
	 * $I->dontSeeElement('//form/input[1]');
	 * $I->dontSeeElement('input', ['name' => 'login']);
	 * $I->dontSeeElement('input', ['value' => '123456']);
	 * ?>
	 * ```
	 *
	 * @see \Codeception\Module\WebDriver::dontSeeElement()
	 * @param unknown $selector
	 * @param array   $attributes (optional)
	 * @return unknown
	 */
	public function dontSeeElement($selector, $attributes = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\Assertion('dontSeeElement', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that the given element exists on the page, even it is invisible.
	 *
	 * ``` php
	 * <?php
	 * $I->seeElementInDOM('//form/input[type=hidden]');
	 * ?>
	 * ```
	 *
	 * Conditional Assertion: Test won't be stopped on fail
	 *
	 * @see \Codeception\Module\WebDriver::seeElementInDOM()
	 * @param unknown $selector
	 * @param unknown $attributes (optional)
	 * @return unknown
	 */
	public function canSeeElementInDOM($selector, $attributes = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeElementInDOM', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that the given element exists on the page, even it is invisible.
	 *
	 * ``` php
	 * <?php
	 * $I->seeElementInDOM('//form/input[type=hidden]');
	 * ?>
	 * ```
	 *
	 * @see \Codeception\Module\WebDriver::seeElementInDOM()
	 * @param unknown $selector
	 * @param unknown $attributes (optional)
	 * @return unknown
	 */
	public function seeElementInDOM($selector, $attributes = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeElementInDOM', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Opposite of `seeElementInDOM`.
	 *
	 * Conditional Assertion: Test won't be stopped on fail
	 *
	 * @see \Codeception\Module\WebDriver::dontSeeElementInDOM()
	 * @param unknown $selector
	 * @param unknown $attributes (optional)
	 * @return unknown
	 */
	public function cantSeeElementInDOM($selector, $attributes = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeElementInDOM', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Opposite of `seeElementInDOM`.
	 *
	 * @see \Codeception\Module\WebDriver::dontSeeElementInDOM()
	 * @param unknown $selector
	 * @param unknown $attributes (optional)
	 * @return unknown
	 */
	public function dontSeeElementInDOM($selector, $attributes = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\Assertion('dontSeeElementInDOM', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that there are a certain number of elements matched by the given locator on the page.
	 *
	 * ``` php
	 * <?php
	 * $I->seeNumberOfElements('tr', 10);
	 * $I->seeNumberOfElements('tr', [0,10]); //between 0 and 10 elements
	 * ?>
	 * ```
	 * - string: strict number
	 * - array: range of numbers [0,10]
	 * Conditional Assertion: Test won't be stopped on fail
	 *
	 * @see \Codeception\Module\WebDriver::seeNumberOfElements()
	 * @param unknown $selector
	 * @param mixed   $expected :
	 * @return unknown
	 */
	public function canSeeNumberOfElements($selector, $expected) {
		return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeNumberOfElements', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that there are a certain number of elements matched by the given locator on the page.
	 *
	 * ``` php
	 * <?php
	 * $I->seeNumberOfElements('tr', 10);
	 * $I->seeNumberOfElements('tr', [0,10]); //between 0 and 10 elements
	 * ?>
	 * ```
	 * - string: strict number
	 * - array: range of numbers [0,10]
	 *
	 * @see \Codeception\Module\WebDriver::seeNumberOfElements()
	 * @param unknown $selector
	 * @param mixed   $expected :
	 * @return unknown
	 */
	public function seeNumberOfElements($selector, $expected) {
		return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeNumberOfElements', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 *
	 * Conditional Assertion: Test won't be stopped on fail
	 *
	 * @see \Codeception\Module\WebDriver::seeNumberOfElementsInDOM()
	 * @param unknown $selector
	 * @param unknown $expected
	 * @return unknown
	 */
	public function canSeeNumberOfElementsInDOM($selector, $expected) {
		return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeNumberOfElementsInDOM', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 *
	 * @see \Codeception\Module\WebDriver::seeNumberOfElementsInDOM()
	 * @param unknown $selector
	 * @param unknown $expected
	 * @return unknown
	 */
	public function seeNumberOfElementsInDOM($selector, $expected) {
		return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeNumberOfElementsInDOM', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that the given option is selected.
	 *
	 * ``` php
	 * <?php
	 * $I->seeOptionIsSelected('#form input[name=payment]', 'Visa');
	 * ?>
	 * ```
	 *
	 *
	 * Conditional Assertion: Test won't be stopped on fail
	 *
	 * @see \Codeception\Module\WebDriver::seeOptionIsSelected()
	 * @param unknown $selector
	 * @param unknown $optionText
	 * @return mixed
	 */
	public function canSeeOptionIsSelected($selector, $optionText) {
		return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeOptionIsSelected', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that the given option is selected.
	 *
	 * ``` php
	 * <?php
	 * $I->seeOptionIsSelected('#form input[name=payment]', 'Visa');
	 * ?>
	 * ```
	 *
	 *
	 * @see \Codeception\Module\WebDriver::seeOptionIsSelected()
	 * @param unknown $selector
	 * @param unknown $optionText
	 * @return mixed
	 */
	public function seeOptionIsSelected($selector, $optionText) {
		return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeOptionIsSelected', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that the given option is not selected.
	 *
	 * ``` php
	 * <?php
	 * $I->dontSeeOptionIsSelected('#form input[name=payment]', 'Visa');
	 * ?>
	 * ```
	 *
	 *
	 * Conditional Assertion: Test won't be stopped on fail
	 *
	 * @see \Codeception\Module\WebDriver::dontSeeOptionIsSelected()
	 * @param unknown $selector
	 * @param unknown $optionText
	 * @return mixed
	 */
	public function cantSeeOptionIsSelected($selector, $optionText) {
		return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeOptionIsSelected', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that the given option is not selected.
	 *
	 * ``` php
	 * <?php
	 * $I->dontSeeOptionIsSelected('#form input[name=payment]', 'Visa');
	 * ?>
	 * ```
	 *
	 *
	 * @see \Codeception\Module\WebDriver::dontSeeOptionIsSelected()
	 * @param unknown $selector
	 * @param unknown $optionText
	 * @return mixed
	 */
	public function dontSeeOptionIsSelected($selector, $optionText) {
		return $this->getScenario()->runStep(new \Codeception\Step\Assertion('dontSeeOptionIsSelected', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that the page title contains the given string.
	 *
	 * ``` php
	 * <?php
	 * $I->seeInTitle('Blog - Post #1');
	 * ?>
	 * ```
	 *
	 *
	 * Conditional Assertion: Test won't be stopped on fail
	 *
	 * @see \Codeception\Module\WebDriver::seeInTitle()
	 * @param unknown $title
	 * @return mixed
	 */
	public function canSeeInTitle($title) {
		return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeInTitle', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that the page title contains the given string.
	 *
	 * ``` php
	 * <?php
	 * $I->seeInTitle('Blog - Post #1');
	 * ?>
	 * ```
	 *
	 *
	 * @see \Codeception\Module\WebDriver::seeInTitle()
	 * @param unknown $title
	 * @return mixed
	 */
	public function seeInTitle($title) {
		return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeInTitle', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that the page title does not contain the given string.
	 *
	 *
	 * Conditional Assertion: Test won't be stopped on fail
	 *
	 * @see \Codeception\Module\WebDriver::dontSeeInTitle()
	 * @param unknown $title
	 * @return mixed
	 */
	public function cantSeeInTitle($title) {
		return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeInTitle', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that the page title does not contain the given string.
	 *
	 *
	 * @see \Codeception\Module\WebDriver::dontSeeInTitle()
	 * @param unknown $title
	 * @return mixed
	 */
	public function dontSeeInTitle($title) {
		return $this->getScenario()->runStep(new \Codeception\Step\Assertion('dontSeeInTitle', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Accepts the active JavaScript native popup window, as created by `window.alert`|`window.confirm`|`window.prompt`.
	 * Don't confuse popups with modal windows,
	 * as created by [various libraries](http://jster.net/category/windows-modals-popups).
	 *
	 * @see \Codeception\Module\WebDriver::acceptPopup()
	 * @return unknown
	 */
	public function acceptPopup() {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('acceptPopup', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Dismisses the active JavaScript popup, as created by `window.alert`|`window.confirm`|`window.prompt`.
	 *
	 * @see \Codeception\Module\WebDriver::cancelPopup()
	 * @return unknown
	 */
	public function cancelPopup() {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('cancelPopup', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that the active JavaScript popup,
	 * as created by `window.alert`|`window.confirm`|`window.prompt`, contains the given string.
	 *
	 * Conditional Assertion: Test won't be stopped on fail
	 *
	 * @see \Codeception\Module\WebDriver::seeInPopup()
	 * @param unknown $text
	 * @return unknown
	 */
	public function canSeeInPopup($text) {
		return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeInPopup', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Checks that the active JavaScript popup,
	 * as created by `window.alert`|`window.confirm`|`window.prompt`, contains the given string.
	 *
	 * @see \Codeception\Module\WebDriver::seeInPopup()
	 * @param unknown $text
	 * @return unknown
	 */
	public function seeInPopup($text) {
		return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeInPopup', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Enters text into a native JavaScript prompt popup, as created by `window.prompt`.
	 *
	 * @see \Codeception\Module\WebDriver::typeInPopup()
	 * @param unknown $keys
	 * @return unknown
	 */
	public function typeInPopup($keys) {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('typeInPopup', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Reloads the current page.
	 *
	 * @see \Codeception\Module\WebDriver::reloadPage()
	 * @return unknown
	 */
	public function reloadPage() {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('reloadPage', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Moves back in history.
	 *
	 * @see \Codeception\Module\WebDriver::moveBack()
	 * @return unknown
	 */
	public function moveBack() {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('moveBack', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Moves forward in history.
	 *
	 * @see \Codeception\Module\WebDriver::moveForward()
	 * @return unknown
	 */
	public function moveForward() {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('moveForward', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Submits the given form on the page, optionally with the given form
	 * values.  Give the form fields values as an array. Note that hidden fields
	 * can't be accessed.
	 *
	 * Skipped fields will be filled by their values from the page.
	 * You don't need to click the 'Submit' button afterwards.
	 * This command itself triggers the request to form's action.
	 *
	 * You can optionally specify what button's value to include
	 * in the request with the last parameter as an alternative to
	 * explicitly setting its value in the second parameter, as
	 * button values are not otherwise included in the request.
	 *
	 * Examples:
	 *
	 * ``` php
	 * <?php
	 * $I->submitForm('#login', [
	 *     'login' => 'davert',
	 *     'password' => '123456'
	 * ]);
	 * // or
	 * $I->submitForm('#login', [
	 *     'login' => 'davert',
	 *     'password' => '123456'
	 * ], 'submitButtonName');
	 *
	 * ```
	 *
	 * For example, given this sample "Sign Up" form:
	 *
	 * ``` html
	 * <form action="/sign_up">
	 *     Login:
	 *     <input type="text" name="user[login]" /><br/>
	 *     Password:
	 *     <input type="password" name="user[password]" /><br/>
	 *     Do you agree to our terms?
	 *     <input type="checkbox" name="user[agree]" /><br/>
	 *     Select pricing plan:
	 *     <select name="plan">
	 *         <option value="1">Free</option>
	 *         <option value="2" selected="selected">Paid</option>
	 *     </select>
	 *     <input type="submit" name="submitButton" value="Submit" />
	 * </form>
	 * ```
	 *
	 * You could write the following to submit it:
	 *
	 * ``` php
	 * <?php
	 * $I->submitForm(
	 *     '#userForm',
	 *     [
	 *         'user[login]' => 'Davert',
	 *         'user[password]' => '123456',
	 *         'user[agree]' => true
	 *     ],
	 *     'submitButton'
	 * );
	 * ```
	 * Note that "2" will be the submitted value for the "plan" field, as it is
	 * the selected option.
	 *
	 * Also note that this differs from PhpBrowser, in that
	 * ```'user' => [ 'login' => 'Davert' ]``` is not supported at the moment.
	 * Named array keys *must* be included in the name as above.
	 *
	 * Pair this with seeInFormFields for quick testing magic.
	 *
	 * ``` php
	 * <?php
	 * $form = [
	 *      'field1' => 'value',
	 *      'field2' => 'another value',
	 *      'checkbox1' => true,
	 *      // ...
	 * ];
	 * $I->submitForm('//form[@id=my-form]', $form, 'submitButton');
	 * // $I->amOnPage('/path/to/form-page') may be needed
	 * $I->seeInFormFields('//form[@id=my-form]', $form);
	 * ?>
	 * ```
	 *
	 * Parameter values must be set to arrays for multiple input fields
	 * of the same name, or multi-select combo boxes.  For checkboxes,
	 * either the string value can be used, or boolean values which will
	 * be replaced by the checkbox's value in the DOM.
	 *
	 * ``` php
	 * <?php
	 * $I->submitForm('#my-form', [
	 *      'field1' => 'value',
	 *      'checkbox' => [
	 *          'value of first checkbox',
	 *          'value of second checkbox,
	 *      ],
	 *      'otherCheckboxes' => [
	 *          true,
	 *          false,
	 *          false
	 *      ],
	 *      'multiselect' => [
	 *          'first option value',
	 *          'second option value'
	 *      ]
	 * ]);
	 * ?>
	 * ```
	 *
	 * Mixing string and boolean values for a checkbox's value is not supported
	 * and may produce unexpected results.
	 *
	 * Field names ending in "[]" must be passed without the trailing square
	 * bracket characters, and must contain an array for its value.  This allows
	 * submitting multiple values with the same name, consider:
	 *
	 * ```php
	 * $I->submitForm('#my-form', [
	 *     'field[]' => 'value',
	 *     'field[]' => 'another value', // 'field[]' is already a defined key
	 * ]);
	 * ```
	 *
	 * The solution is to pass an array value:
	 *
	 * ```php
	 * // this way both values are submitted
	 * $I->submitForm('#my-form', [
	 *     'field' => [
	 *         'value',
	 *         'another value',
	 *     ]
	 * ]);
	 * ```
	 *
	 * @see \Codeception\Module\WebDriver::submitForm()
	 * @param unknown $selector
	 * @param unknown $params
	 * @param unknown $button   (optional)
	 * @return unknown
	 */
	public function submitForm($selector, $params, $button = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('submitForm', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Waits up to $timeout seconds for the given element to change.
	 * Element "change" is determined by a callback function which is called repeatedly
	 * until the return value evaluates to true.
	 *
	 * ``` php
	 * <?php
	 * use \Facebook\WebDriver\WebDriverElement
	 * $I->waitForElementChange('#menu', function(WebDriverElement $el) {
	 *     return $el->isDisplayed();
	 * }, 100);
	 * ?>
	 * ```
	 *
	 * @throws \Codeception\Exception\ElementNotFound
	 * @see \Codeception\Module\WebDriver::waitForElementChange()
	 * @param unknown  $element
	 * @param \Closure $callback
	 * @param int      $timeout  (optional) seconds
	 * @return unknown
	 */
	public function waitForElementChange($element, $callback, $timeout = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('waitForElementChange', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Waits up to $timeout seconds for an element to appear on the page.
	 * If the element doesn't appear, a timeout exception is thrown.
	 *
	 * ``` php
	 * <?php
	 * $I->waitForElement('#agree_button', 30); // secs
	 * $I->click('#agree_button');
	 * ?>
	 * ```
	 *
	 * @throws \Exception
	 * @see \Codeception\Module\WebDriver::waitForElement()
	 * @param unknown $element
	 * @param int     $timeout (optional) seconds
	 * @return unknown
	 */
	public function waitForElement($element, $timeout = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('waitForElement', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Waits up to $timeout seconds for the given element to be visible on the page.
	 * If element doesn't appear, a timeout exception is thrown.
	 *
	 * ``` php
	 * <?php
	 * $I->waitForElementVisible('#agree_button', 30); // secs
	 * $I->click('#agree_button');
	 * ?>
	 * ```
	 *
	 * @throws \Exception
	 * @see \Codeception\Module\WebDriver::waitForElementVisible()
	 * @param unknown $element
	 * @param int     $timeout (optional) seconds
	 * @return unknown
	 */
	public function waitForElementVisible($element, $timeout = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('waitForElementVisible', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Waits up to $timeout seconds for the given element to become invisible.
	 * If element stays visible, a timeout exception is thrown.
	 *
	 * ``` php
	 * <?php
	 * $I->waitForElementNotVisible('#agree_button', 30); // secs
	 * ?>
	 * ```
	 *
	 * @throws \Exception
	 * @see \Codeception\Module\WebDriver::waitForElementNotVisible()
	 * @param unknown $element
	 * @param int     $timeout (optional) seconds
	 * @return unknown
	 */
	public function waitForElementNotVisible($element, $timeout = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('waitForElementNotVisible', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Waits up to $timeout seconds for the given string to appear on the page.
	 * Can also be passed a selector to search in.
	 * If the given text doesn't appear, a timeout exception is thrown.
	 *
	 * ``` php
	 * <?php
	 * $I->waitForText('foo', 30); // secs
	 * $I->waitForText('foo', 30, '.title'); // secs
	 * ?>
	 * ```
	 *
	 * @throws \Exception
	 * @see \Codeception\Module\WebDriver::waitForText()
	 * @param string  $text
	 * @param int     $timeout  (optional) seconds
	 * @param null    $selector (optional)
	 * @return unknown
	 */
	public function waitForText($text, $timeout = null, $selector = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('waitForText', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Wait for $timeout seconds.
	 *
	 * @throws \Codeception\Exception\TestRuntimeException
	 * @see \Codeception\Module\WebDriver::wait()
	 * @param int     $timeout secs
	 * @return unknown
	 */
	public function wait($timeout) {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('wait', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Low-level API method.
	 * If Codeception commands are not enough, this allows you to use Selenium WebDriver methods directly:
	 *
	 * ``` php
	 * $I->executeInSelenium(function(\Facebook\WebDriver\Remote\RemoteWebDriver $webdriver) {
	 *   $webdriver->get('http://google.com');
	 * });
	 * ```
	 *
	 * This runs in the context of the
	 * [RemoteWebDriver class](https://github.com/facebook/php-webdriver/blob/master/lib/remote/RemoteWebDriver.php).
	 * Try not to use this command on a regular basis.
	 * If Codeception lacks a feature you need, please implement it and submit a patch.
	 *
	 * @see \Codeception\Module\WebDriver::executeInSelenium()
	 * @param callable $function
	 * @return unknown
	 */
	public function executeInSelenium($function) {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('executeInSelenium', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Switch to another window identified by name.
	 *
	 * The window can only be identified by name. If the $name parameter is blank, the parent window will be used.
	 *
	 * Example:
	 * ``` html
	 * <input type="button" value="Open window" onclick="window.open('http://example.com', 'another_window')">
	 * ```
	 *
	 * ``` php
	 * <?php
	 * $I->click("Open window");
	 * # switch to another window
	 * $I->switchToWindow("another_window");
	 * # switch to parent window
	 * $I->switchToWindow();
	 * ?>
	 * ```
	 *
	 * If the window has no name, the only way to access it is via the `executeInSelenium()` method, like so:
	 *
	 * ``` php
	 * <?php
	 * $I->executeInSelenium(function (\Facebook\WebDriver\Remote\RemoteWebDriver $webdriver) {
	 *      $handles=$webdriver->getWindowHandles();
	 *      $last_window = end($handles);
	 *      $webdriver->switchTo()->window($last_window);
	 * });
	 * ?>
	 * ```
	 *
	 * @see \Codeception\Module\WebDriver::switchToWindow()
	 * @param string|null $name
	 * @return unknown
	 */
	public function switchToWindow($name = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('switchToWindow', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Switch to another frame on the page.
	 *
	 * Example:
	 * ``` html
	 * <iframe name="another_frame" src="http://example.com">
	 *
	 * ```
	 *
	 * ``` php
	 * <?php
	 * # switch to iframe
	 * $I->switchToIFrame("another_frame");
	 * # switch to parent page
	 * $I->switchToIFrame();
	 *
	 * ```
	 *
	 * @see \Codeception\Module\WebDriver::switchToIFrame()
	 * @param string|null $name
	 * @return unknown
	 */
	public function switchToIFrame($name = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('switchToIFrame', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Executes JavaScript and waits up to $timeout seconds for it to return true.
	 *
	 * In this example we will wait up to 60 seconds for all jQuery AJAX requests to finish.
	 *
	 * ``` php
	 * <?php
	 * $I->waitForJS("return $.active == 0;", 60);
	 * ?>
	 * ```
	 *
	 * @see \Codeception\Module\WebDriver::waitForJS()
	 * @param string  $script
	 * @param int     $timeout (optional) seconds
	 * @return unknown
	 */
	public function waitForJS($script, $timeout = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('waitForJS', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Executes custom JavaScript.
	 *
	 * This example uses jQuery to get a value and assigns that value to a PHP variable:
	 *
	 * ```php
	 * <?php
	 * $myVar = $I->executeJS('return $("#myField").val()');
	 * ?>
	 * ```
	 *
	 * @see \Codeception\Module\WebDriver::executeJS()
	 * @param unknown $script
	 * @return mixed
	 */
	public function executeJS($script) {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('executeJS', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Maximizes the current window.
	 *
	 * @see \Codeception\Module\WebDriver::maximizeWindow()
	 * @return unknown
	 */
	public function maximizeWindow() {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('maximizeWindow', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Performs a simple mouse drag-and-drop operation.
	 *
	 * ``` php
	 * <?php
	 * $I->dragAndDrop('#drag', '#drop');
	 * ?>
	 * ```
	 *
	 * @see \Codeception\Module\WebDriver::dragAndDrop()
	 * @param string  $source (CSS ID or XPath)
	 * @param string  $target (CSS ID or XPath)
	 * @return unknown
	 */
	public function dragAndDrop($source, $target) {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('dragAndDrop', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Move mouse over the first element matched by the given locator.
	 * If the second and third parameters are given,
	 * then the mouse is moved to an offset of the element's top-left corner.
	 * Otherwise, the mouse is moved to the center of the element.
	 *
	 * ``` php
	 * <?php
	 * $I->moveMouseOver(['css' => '.checkout'], 20, 50);
	 * ?>
	 * ```
	 *
	 *
	 * @throws \Codeception\Exception\ElementNotFound
	 * @see \Codeception\Module\WebDriver::moveMouseOver()
	 * @param string  $cssOrXPath css or xpath of the web element
	 * @param int     $offsetX    (optional)
	 * @param int     $offsetY    (optional)
	 * @return unknown
	 */
	public function moveMouseOver($cssOrXPath, $offsetX = null, $offsetY = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('moveMouseOver', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Performs contextual click with the right mouse button on an element.
	 *
	 * @throws \Codeception\Exception\ElementNotFound
	 * @see \Codeception\Module\WebDriver::clickWithRightButton()
	 * @param unknown $cssOrXPath
	 * @return unknown
	 */
	public function clickWithRightButton($cssOrXPath) {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('clickWithRightButton', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Pauses test execution in debug mode.
	 * To proceed test press "ENTER" in console.
	 *
	 * This method is useful while writing tests,
	 * since it allows you to inspect the current page in the middle of a test case.
	 *
	 * @see \Codeception\Module\WebDriver::pauseExecution()
	 * @return unknown
	 */
	public function pauseExecution() {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('pauseExecution', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Performs a double-click on an element matched by CSS or XPath.
	 *
	 * @throws \Codeception\Exception\ElementNotFound
	 * @see \Codeception\Module\WebDriver::doubleClick()
	 * @param unknown $cssOrXPath
	 * @return unknown
	 */
	public function doubleClick($cssOrXPath) {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('doubleClick', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Presses the given key on the given element.
	 * To specify a character and modifier (e.g. ctrl, alt, shift, meta), pass an array for $char with
	 * the modifier as the first element and the character as the second.
	 * For special keys use key constants from WebDriverKeys class.
	 *
	 * ``` php
	 * <?php
	 * // <input id="page" value="old" />
	 * $I->pressKey('#page','a'); // => olda
	 * $I->pressKey('#page',array('ctrl','a'),'new'); //=> new
	 * $I->pressKey('#page',array('shift','111'),'1','x'); //=> old!!!1x
	 * $I->pressKey('descendant-or-self::*[@id='page']','u'); //=> oldu
	 * $I->pressKey('#name', array('ctrl', 'a'), \Facebook\WebDriver\WebDriverKeys::DELETE); //=>''
	 * ?>
	 * ```
	 *
	 * @throws \Codeception\Exception\ElementNotFound
	 * @see \Codeception\Module\WebDriver::pressKey()
	 * @param unknown $element
	 * @param unknown $char    Can be char or array with modifier. You can provide several chars.
	 * @return unknown
	 */
	public function pressKey($element, $char) {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('pressKey', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Append the given text to the given element.
	 * Can also add a selection to a select box.
	 *
	 * ``` php
	 * <?php
	 * $I->appendField('#mySelectbox', 'SelectValue');
	 * $I->appendField('#myTextField', 'appended');
	 * ?>
	 * ```
	 *
	 * @throws \Codeception\Exception\ElementNotFound
	 * @see \Codeception\Module\WebDriver::appendField()
	 * @param string  $field
	 * @param string  $value
	 * @return unknown
	 */
	public function appendField($field, $value) {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('appendField', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * @see \Codeception\Module\WebDriver::saveSessionSnapshot()
	 * @param string  $name
	 * @return unknown
	 */
	public function saveSessionSnapshot($name) {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('saveSessionSnapshot', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * @see \Codeception\Module\WebDriver::loadSessionSnapshot()
	 * @param string  $name
	 * @return bool
	 */
	public function loadSessionSnapshot($name) {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('loadSessionSnapshot', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Move to the middle of the given element matched by the given locator.
	 * Extra shift, calculated from the top-left corner of the element,
	 * can be set by passing $offsetX and $offsetY parameters.
	 *
	 * ``` php
	 * <?php
	 * $I->scrollTo(['css' => '.checkout'], 20, 50);
	 * ?>
	 * ```
	 *
	 * @see \Codeception\Module\WebDriver::scrollTo()
	 * @param unknown $selector
	 * @param int     $offsetX  (optional)
	 * @param int     $offsetY  (optional)
	 * @return unknown
	 */
	public function scrollTo($selector, $offsetX = null, $offsetY = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('scrollTo', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Inserts an SQL record into a database. This record will be erased after the test.
	 *
	 * ``` php
	 * <?php
	 * $I->haveInDatabase('users', array('name' => 'miles', 'email' => 'miles@davis.com'));
	 * ?>
	 * ```
	 *
	 *
	 * @see \Codeception\Module\Db::haveInDatabase()
	 * @param string  $table
	 * @param array   $data
	 * @return integer $id
	 */
	public function haveInDatabase($table, $data) {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('haveInDatabase', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Asserts that a row with the given column values exists.
	 * Provide table name and column values.
	 *
	 * ``` php
	 * <?php
	 * $I->seeInDatabase('users', array('name' => 'Davert', 'email' => 'davert@mail.com'));
	 * ```
	 * Fails if no such user found.
	 *
	 * Conditional Assertion: Test won't be stopped on fail
	 *
	 * @see \Codeception\Module\Db::seeInDatabase()
	 * @param string  $table
	 * @param array   $criteria (optional)
	 * @return unknown
	 */
	public function canSeeInDatabase($table, $criteria = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeInDatabase', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Asserts that a row with the given column values exists.
	 * Provide table name and column values.
	 *
	 * ``` php
	 * <?php
	 * $I->seeInDatabase('users', array('name' => 'Davert', 'email' => 'davert@mail.com'));
	 * ```
	 * Fails if no such user found.
	 *
	 * @see \Codeception\Module\Db::seeInDatabase()
	 * @param string  $table
	 * @param array   $criteria (optional)
	 * @return unknown
	 */
	public function seeInDatabase($table, $criteria = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeInDatabase', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Asserts that the given number of records were found in the database.
	 *
	 * ``` php
	 * <?php
	 * $I->seeNumRecords(1, 'users', ['name' => 'davert'])
	 * ?>
	 * ```
	 *
	 * Conditional Assertion: Test won't be stopped on fail
	 *
	 * @see \Codeception\Module\Db::seeNumRecords()
	 * @param int     $expectedNumber Expected number
	 * @param string  $table          Table name
	 * @param array   $criteria       (optional) Search criteria [Optional]
	 * @return unknown
	 */
	public function canSeeNumRecords($expectedNumber, $table, $criteria = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('seeNumRecords', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Asserts that the given number of records were found in the database.
	 *
	 * ``` php
	 * <?php
	 * $I->seeNumRecords(1, 'users', ['name' => 'davert'])
	 * ?>
	 * ```
	 *
	 * @see \Codeception\Module\Db::seeNumRecords()
	 * @param int     $expectedNumber Expected number
	 * @param string  $table          Table name
	 * @param array   $criteria       (optional) Search criteria [Optional]
	 * @return unknown
	 */
	public function seeNumRecords($expectedNumber, $table, $criteria = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\Assertion('seeNumRecords', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Effect is opposite to ->seeInDatabase
	 *
	 * Asserts that there is no record with the given column values in a database.
	 * Provide table name and column values.
	 *
	 * ``` php
	 * <?php
	 * $I->dontSeeInDatabase('users', array('name' => 'Davert', 'email' => 'davert@mail.com'));
	 * ```
	 * Fails if such user was found.
	 *
	 * Conditional Assertion: Test won't be stopped on fail
	 *
	 * @see \Codeception\Module\Db::dontSeeInDatabase()
	 * @param string  $table
	 * @param array   $criteria (optional)
	 * @return unknown
	 */
	public function cantSeeInDatabase($table, $criteria = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\ConditionalAssertion('dontSeeInDatabase', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Effect is opposite to ->seeInDatabase
	 *
	 * Asserts that there is no record with the given column values in a database.
	 * Provide table name and column values.
	 *
	 * ``` php
	 * <?php
	 * $I->dontSeeInDatabase('users', array('name' => 'Davert', 'email' => 'davert@mail.com'));
	 * ```
	 * Fails if such user was found.
	 *
	 * @see \Codeception\Module\Db::dontSeeInDatabase()
	 * @param string  $table
	 * @param array   $criteria (optional)
	 * @return unknown
	 */
	public function dontSeeInDatabase($table, $criteria = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\Assertion('dontSeeInDatabase', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Fetches a single column value from a database.
	 * Provide table name, desired column and criteria.
	 *
	 * ``` php
	 * <?php
	 * $mail = $I->grabFromDatabase('users', 'email', array('name' => 'Davert'));
	 * ```
	 *
	 *
	 * @see \Codeception\Module\Db::grabFromDatabase()
	 * @param string  $table
	 * @param string  $column
	 * @param array   $criteria (optional)
	 * @return mixed
	 */
	public function grabFromDatabase($table, $column, $criteria = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('grabFromDatabase', func_get_args()));
	}


	/**
	 * [!] Method is generated. Documentation taken from corresponding module.
	 *
	 * Returns the number of rows in a database
	 *
	 *
	 * @see \Codeception\Module\Db::grabNumRecords()
	 * @param string  $table    Table name
	 * @param array   $criteria (optional) Search criteria [Optional]
	 * @return int
	 */
	public function grabNumRecords($table, $criteria = null) {
		return $this->getScenario()->runStep(new \Codeception\Step\Action('grabNumRecords', func_get_args()));
	}


}
